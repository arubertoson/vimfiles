# ===========================================================================
# _vimrc.yaml * miv plugin manager setup file.
#
# Author: Marcus Albertsson (arubertoson@github.com)
# License: MIT license
# ===========================================================================

# ===========================================================================
# CONTENTS

# |Visual-Themes|
# |Auto-Complete|
# |Command-Palette|
# |Git|

plugin:
# ===========================================================================
# VISUAL-THEMES                                               *Visual-Themes*

  # Syntax highlighting and file settings
  sheerun/vim-polyglot: {}

  # Themes
  reedes/vim-colors-pencil: {}
  mhinz/vim-janah:
    before: highlight Normal ctermbg=235
  ayu-theme/ayu-vim:
    before: |
      let g:ayucolor="mirage"

  # Visual Enhancements
  yami-beta/vim-responsive-tabline: {}
  itchyny/vim-parenmatch:
    after: |
      highlight! link MatchParen ParenMatch
  itchyny/vim-cursorword:
    script: |
      augroup cursorword-filetype
        autocmd!
        autocmd FileType qf,denite,vimfiler,vimshell,thumbnail,vimcalc,quickrun,calendar let b:cursorword = 0
        autocmd InsertEnter * let b:cursorword = 0
        autocmd InsertLeave * let b:cursorword = 1
      augroup END
  # display indentguides ¦ ┆ │ ⎸ ▏
  Yggdroot/indentLine:
    script: |
      let g:indentLine_char = '¦'
      let g:indentLine_showFirstIndentLevel = 0
      let g:indentLine_leadingSpaceChar = '·'
      let g:indentLine_leadingSpaceEnabled = 0

  itchyny/lightline.vim:
    script: |
      let g:lightline = {
      \ 'enable': {
      \ },
      \ 'colorscheme': 'wombat',
      \ 'active': {
      \   'left':  [ 
      \              ['mode', 'paste'],
      \              ['gitbranch', 'readonly', 'relativepath', 'modified'],
      \            ],
      \   'right': [ 
      \              ['percent', 'lineinfo'],
      \              ['fileformat', 'fileencoding', 'filetype'],
      \              ['linter_errors', 'linter_warnings', 'linter_ok'],
      \            ]
      \ },
      \ 'inactive': {
      \   'left':  [ 
      \              ['filename'], 
      \            ],
      \   'right': [ 
      \              ['lineinfo'],
      \              ['percent'],
      \            ] 
      \ },
      \ 'component_expand': {
      \   'linter_warnings': 'LightlineLinterWarnings',
      \   'linter_errors': 'LightlineLinterErrors',
      \   'linter_ok': 'LightlineLinterOK'
      \ },
      \ 'component_type': {
      \   'readonly': 'error',
      \   'linter_warnings': 'warning',
      \   'linter_errors': 'error',
      \ },
      \ }
      Gautocmd User ALELint call lightline#update()

      function! LightlineLinterErrors() abort
        let l:counts = ale#statusline#Count(bufnr(''))
        let l:all_errors = l:counts.error + l:counts.style_error
        let l:all_non_errors = l:counts.total - l:all_errors
        return l:counts.total == 0 ? '' : printf('x %d', all_errors)
      endfunction

      function! LightlineLinterWarnings() abort
        let l:counts = ale#statusline#Count(bufnr(''))
        let l:all_errors = l:counts.error + l:counts.style_error
        let l:all_non_errors = l:counts.total - l:all_errors
        return l:counts.total == 0 ? '' : printf('▲ %d', all_non_errors)
      endfunction

      function! LightlineLinterOK() abort
        let l:counts = ale#statusline#Count(bufnr(''))
        let l:all_errors = l:counts.error + l:counts.style_error
        let l:all_non_errors = l:counts.total - l:all_errors
        return l:counts.total == 0 ? '♦ Ok' : ''
      endfunction


# ===========================================================================
# AUTO-COMPLETE                                               *Auto-Complete*

  Shougo/deoplete.nvim:
    insert: true
    script: |
      let g:deoplete#enable_at_startup = 1

      let g:deoplete#max_list = 20
      let g:deoplete#auto_complete_delay = 30
      let g:deoplete#enable_refresh_always = 1
      let g:deoplete#max_abbr_width = 35
      let g:deoplete#max_menu_width = 20
      let g:deoplete#skip_chars = ['(', ')', '<', '>']
      let g:deoplete#tag#cache_limit_size = 800000
      let g:deoplete#file#enable_buffer_path = 1

      " Jedi
      let g:deoplete#sources#jedi#short_types = 1
      let g:deoplete#sources#jedi#show_docstring = 1
      let g:deoplete#sources#jedi#statement_length = 30

      " Sources
      let g:deoplete#ignore_sources = {}
      let g:deoplete#ignore_sources._ = ['around']
      let g:deoplete#ignore_sources.python = 
        \ ['buffer', 'dictionary', 'omni', 'tag', 'syntax']
      let g:deoplete#ignore_sources.c = 
        \ ['buffer', 'dictionary', 'omni', 'tag', 'syntax']
      let g:deoplete#ignore_sources.cpp = g:deoplete#ignore_sources.c  

      let g:deoplete#sources#clang#libclang_path = '/usr/lib/libclang.so.5.0'
      let g:deoplete#sources#clang#clang_header = '/usr/lib/clang'

      let g:deoplete#omni#input_patterns = get(g:, 'deoplete#omni#input_patterns', {})
      let g:deoplete#omni#input_patterns.python = ''
      let g:deoplete#omni#input_patterns.javascript = ''
    
      " Movement within 'ins-completion-menu'
      imap <expr><C-j>   pumvisible() ? "\<Down>" : "\<C-j>"
      imap <expr><C-k>   pumvisible() ? "\<Up>" : "\<C-k>"

      " Scroll pages in menu
      inoremap <expr><C-f> pumvisible() ? "\<PageDown>" : "\<Right>"
      inoremap <expr><C-b> pumvisible() ? "\<PageUp>" : "\<Left>"
      imap     <expr><C-d> pumvisible() ? "\<PageDown>" : "\<C-d>"
      imap     <expr><C-u> pumvisible() ? "\<PageUp>" : "\<C-u>"

      " Undo completion
      inoremap <expr><C-g> deoplete#undo_completion()

      " Redraw candidates
      inoremap <silent><expr><C-Space> deoplete#mappings#manual_complete()
      inoremap <expr><C-l> deoplete#refresh()
    after: |
      " Jedi
      call deoplete#custom#source('jedi', 'disable_syntaxes', ['Comment'])
      call deoplete#custom#source('jedi', 'matchers', ['matcher_fuzzy'])

      " Marks
      call deoplete#custom#source('omni',          'mark', '⌾')
      call deoplete#custom#source('jedi',          'mark', '⌁')
      call deoplete#custom#source('vim',           'mark', '⌁')
      call deoplete#custom#source('neosnippet',    'mark', '•')
      call deoplete#custom#source('tag',           'mark', 't')
      call deoplete#custom#source('gtags',         'mark', 'gt')
      call deoplete#custom#source('buffer',        'mark', 'b')

      " Default rank is 100, higher is better.
      call deoplete#custom#source('vim',           'rank', 630)
      call deoplete#custom#source('jedi',          'rank', 610)
      call deoplete#custom#source('neosnippet',    'rank', 510)
      call deoplete#custom#source('file_include',  'rank', 420)
      call deoplete#custom#source('file',          'rank', 410)
      call deoplete#custom#source('tag',           'rank', 400)
      call deoplete#custom#source('gtags',         'rank', 400)
      call deoplete#custom#source('buffer',        'rank', 320)

      call deoplete#custom#source('_', 'converters', [
        \ 'converter_remove_paren',
        \ 'converter_remove_overlap',
        \ 'converter_truncate_abbr',
        \ 'converter_truncate_menu',
        \ 'converter_auto_delimiter',
        \ ])
    dependby:
      - neco
      - neoinclude
      - deoplete-jedi
      - deoplete-clang

  Shougo/neco-vim:
    loadafter: deoplete.nvim
    filetype: vim
  zchee/deoplete-jedi:
    loadafter: deoplete.nvim
    filetype: python
    submodule: true

  Shougo/neoinclude.vim:
    loadafter: deoplete.nvim
    filetype: [c, cpp, objc, objcpp]
  zchee/deoplete-clang:
    loadafter: deoplete.nvim
    filetype: [c, cpp, objc, objcpp]
    submodule: true

# ===========================================================================
# COMMAND_PALETTE                                           *Command-Palette*

  Shougo/denite.nvim:
    command: 
      - Denite
      - DeniteProjectDir
      - DeniteCursorWord
    script: |
      nnoremap <silent> <leader>pf :DeniteProjectDir file_rec/git<cr>

      nnoremap <silent> <leader>sg :<C-u>Denite grep<CR>
      nnoremap <silent> <leader>sf :<C-u>Denite file_rec<CR>
      nnoremap <silent> <leader>ss :<C-u>Denite line -buffer-name=search<CR>
      nnoremap <silent> <leader>as :<C-U>Denite file_rec -path=$VIMPATH<CR>

      nnoremap <silent> <leader>bb :<C-u>Denite buffer<CR>
      nnoremap <silent> <leader>bt :<C-u>Denite filetype<CR>
      nnoremap <silent> <leader><leader> :<C-u>Denite command<CR>
      nnoremap <silent> <leader>` :<C-u>Denite command_history<CR>
    after: |
      call denite#custom#option('_', {
        \ 'prompt': '❯',
        \ 'empty': 1,
        \ 'winheight': 10,
        \ 'short_source_names': 1,
        \ 'vertical_preview': 1,
        \ 'updatetime': 10,
        \ })
      call denite#custom#filter('matcher_ignore_globs', 'ignore_globs', [
        \ '.git/', '__pycache__/', '*.py[cd]'
        \ ])

      if executable('rg')
        call denite#custom#var('grep', 'command', ['rg'])
        call denite#custom#var('grep', 'recursive_opts', [])
        call denite#custom#var('grep', 'final_opts', ['.'])
        call denite#custom#var('grep', 'separator', ['--'])
        call denite#custom#var('grep', 'default_opts',
          \ ['--maxdepth', '8', '--vimgrep', '--no-heading'])
      endif
      call denite#custom#var('file_rec', 'command', ['rg', '--files'])

      " Sources
      call denite#custom#source('buffer', 'sorters', ['sorter_reverse'])
      call denite#custom#source('file_rec', 'sorters', ['sorter_sublime'])
      call denite#custom#source('file_rec', 'matchers', ['matcher_substring'])
      call denite#custom#source('file_mru', 'matchers', ['matcher_project_files',
        \ 'matcher_substring'])
      call denite#custom#source('file_mru,file_rec,buffer', 'converters',
        \ ['converter_relative_word'])

      call denite#custom#alias('source', 'file_rec/git', 'file_rec')
      call denite#custom#var('file_rec/git', 'command', 
        \ ['git', 'ls-files', '--others', '--cached', '--exclude-standard'
        \ ])

      " Mappings
      call denite#custom#map('normal', 'q',        '<denite:quit>',                        'noremap')
      call denite#custom#map('normal', '<Esc>',    '<denite:quit>',                        'noremap')
      call denite#custom#map('normal', '-',        '<denite:choose_action>',               'noremap')
      call denite#custom#map('normal', 'd',        '<denite:do_action:delete>',            'noremap')
      call denite#custom#map('normal', 'o',        '<denite:do_action:default>',           'noremap')
      call denite#custom#map('normal', 'f',        '<denite:do_action:find>',              'noremap')
      call denite#custom#map('normal', 'r',        '<denite:do_action:reset>',             'noremap')
      call denite#custom#map('normal', 'u',        '<denite:do_action:update>',            'noremap')
      call denite#custom#map('normal', '<C-v>',    '<denite:do_action:vsplit>',            'noremap')
      call denite#custom#map('insert', '<C-i>',    '<denite:choose_action>',               'noremap')
      call denite#custom#map('insert', 'kj',       '<denite:enter_mode:normal>',           'noremap')
      call denite#custom#map('insert', '<C-j>',    '<denite:move_to_next_line>',           'noremap')
      call denite#custom#map('insert', '<C-k>',    '<denite:move_to_previous_line>',           'noremap')
      call denite#custom#map('insert', '<C-p>',    '<denite:paste_from_default_register>', 'noremap')
      call denite#custom#map('insert', '<C-d>',    '<denite:delete_char_before_caret>',    'noremap')
      call denite#custom#map('insert', '<C-h>',    '<denite:move_caret_to_left>',          'noremap')
      call denite#custom#map('insert', '<C-l>',    '<denite:move_caret_to_right>',         'noremap')
      call denite#custom#map('insert', '<C-a>',    '<denite:move_caret_to_head>',          'noremap')
      call denite#custom#map('insert', '<C-e>',    '<denite:move_caret_to_tail>',          'noremap')
      call denite#custom#map('insert', '<C-v>',    '<denite:do_action:vsplit>',            'noremap')

      autocmd! Syntax denite
        \  highlight! default link deniteStatusLinePath   StatusLine
        \| highlight! default link deniteStatusLineNumber StatusLine


# ===========================================================================
# GIT                                                                   *Git*

  # Gutter signs for git diff
  mhinz/vim-signify: {}
  # Git log/diff viewer
  cohama/agit.vim:
    command:
      - Agit
      - AgitFile
      - AgitDiff
        
  # Magit inspired git interface in vim
  jreybert/vimagit:
    command:
      - Magit
    script: |
      let g:magit_default_show_all_files = 0
      
  # Save sessions with branches
  ToruIwashita/git-switcher.vim:
    script: |
      let g:gsw_sessions_dir = expand('$XDG_CACHE_HOME/git_switcher/')
      let g:gsw_autoload_session = 'yes'
      let g:gsw_autodelete_sessions_if_branch_not_exist = 'confirm'


# ===========================================================================
# HOOK-ON-SOURCE                                             *Hook-on-source*

before: |
  Gautocmd BufWritePost _vimrc.yaml let mivjob = jobstart(
    \ ['bash', '-c "', 'miv', 'install"'])

  let g:vimrc#theme = 'icode'
  let g:vimrc#themes = {
    \   'iwrite': { 'colorscheme': 'pencil',
    \              'background': 'light',
    \              'font-size': '14',
    \              'linespace': '6',
    \              'typeface': 'Cousine',
    \              'callback': 'iwrite'},
    \   'icode': { 'colorscheme': 'ayu',
    \              'background': 'dark',
    \              'font-size': '12',
    \              'linespace': '3',
    \              'typeface': 'Droid Sans Mono',
    \              'callback': 'icode'},
    \ }


# ===========================================================================
# HOOK-AFTER-SOURCE                                       *Hook-after-source*
after: |
  if !has('gui_running')
    execute 'colorscheme' get(
      \ g:vimrc#themes[g:vimrc#theme], 'colorscheme', 'desert')
  endif

