# _vimrc.yaml * miv plugin manager setup file.

# Author: Shougo <Shougo.Matsu at gmail.com>
# License: MIT license

# CONTENTS
# |Auto-Complete|
#
#
#
plugin:
  
  # ===========================================================================
  # AUTO-COMPLETE                                               *Auto-Complete*

  roxma/nvim-completion-manager: 
    insert: true

  roxma/clang_complete:
    loadafter: nvim-completion-manager
    filetype: [c, cpp, objc, objcpp]

  # roxma/ncm-clang:
  #   loadafter: nvim-completion-manager
  #   filetype: [c, cpp, objc, objcpp]
  
  # Shougo/deoplete.nvim:
  #   insert: true
  #   script: |
  #     let g:deoplete#enable_at_startup = 1

  #     " General
  #     let g:deoplete#max_list = 20
  #     let g:deoplete#auto_complete_delay = 30
  #     let g:deoplete#enable_refresh_always = 1
  #     let g:deoplete#max_abbr_width = 35
  #     let g:deoplete#max_menu_width = 20
  #     let g:deoplete#skip_chars = ['(', ')', '<', '>']
  #     let g:deoplete#tag#cache_limit_size = 800000
  #     let g:deoplete#file#enable_buffer_path = 1

  #     " Jedi
  #     let g:deoplete#sources#jedi#short_types = 1
  #     let g:deoplete#sources#jedi#show_docstring = 1
  #     let g:deoplete#sources#jedi#statement_length = 30

  #     " Sources
  #     let g:deoplete#omni#functions = get(g:, 'deoplete#omni#functions', {})
  #     let g:deoplete#omni#functions.css = 'csscomplete#CompleteCSS'
  #     let g:deoplete#omni#functions.html = 'htmlcomplete#CompleteTags'
  #     let g:deoplete#omni#functions.markdown = 'htmlcomplete#CompleteTags'

  #     let g:deoplete#omni_patterns = get(g:, 'deoplete#omni_patterns', {})
  #     let g:deoplete#omni_patterns.html = '<[^>]*'
  #     let g:deoplete#omni_patterns.php =
  #       \ '\h\w*\|[^. \t]->\%(\h\w*\)\?\|\h\w*::\%(\h\w*\)\?'

  #     let g:deoplete#omni#input_patterns = get(g:, 'deoplete#omni#input_patterns', {})
  #     let g:deoplete#omni#input_patterns.xml = '<[^>]*'
  #     let g:deoplete#omni#input_patterns.md = '<[^>]*'
  #     let g:deoplete#omni#input_patterns.css  = '^\s\+\w\+\|\w\+[):;]\?\s\+\w*\|[@!]'
  #     let g:deoplete#omni#input_patterns.scss = '^\s\+\w\+\|\w\+[):;]\?\s\+\w*\|[@!]'
  #     let g:deoplete#omni#input_patterns.sass = '^\s\+\w\+\|\w\+[):;]\?\s\+\w*\|[@!]'
  #     let g:deoplete#omni#input_patterns.python = ''
  #     let g:deoplete#omni#input_patterns.javascript = ''
      
  #     let g:deoplete#sources = {}
  #     let g:deoplete#sources.python = ['jedi', 'file', 'neosnippet']

  #     " Mapping
  #     MyAuto CompleteDone * silent! pclose!

  #     " Movement within 'ins-completion-menu'
  #     imap <expr><C-j>   pumvisible() ? "\<Down>" : "\<C-j>"
  #     imap <expr><C-k>   pumvisible() ? "\<Up>" : "\<C-k>"

  #     " Scroll pages in menu
  #     inoremap <expr><C-f> pumvisible() ? "\<PageDown>" : "\<Right>"
  #     inoremap <expr><C-b> pumvisible() ? "\<PageUp>" : "\<Left>"
  #     imap     <expr><C-d> pumvisible() ? "\<PageDown>" : "\<C-d>"
  #     imap     <expr><C-u> pumvisible() ? "\<PageUp>" : "\<C-u>"

  #     " Undo completion
  #     inoremap <expr><C-g> deoplete#undo_completion()

  #     " Redraw candidates
  #     inoremap <silent><expr><C-Space> deoplete#mappings#manual_complete()
  #     inoremap <expr><C-l> deoplete#refresh()

  #     " <Tab> completion:
  #     " if popup menu is visible, we have a selection
  #     "   - if selection is a snippet expand it
  #     "   - else select the first object in the list
  #     " else
  #     "   - if we can expand or jump in snippet do it
  #     "   - return normal tab
  #     function! s:custom_complete()
  #       if pumvisible()
  #         if !empty(v:completed_item)
  #           if neosnippet#expandable_or_jumpable()
  #             return "\<C-y>\<Plug>(neosnippet_expand_or_jump)"
  #           endif
  #         else
  #           return "\<C-n>"
  #         endif
  #       else
  #         if neosnippet#expandable_or_jumpable()
  #           return "\<Plug>(neosnippet_expand_or_jump)"
  #         endif
  #       endif
  #       return '\<TAB>'
  #     endfunction
  #     imap <silent><expr><TAB> <SID>custom_complete()
  #   after: |
  #     " Jedi
  #     call deoplete#custom#source('jedi', 'disable_syntaxes', ['Comment'])
  #     call deoplete#custom#source('jedi', 'matchers', ['matcher_fuzzy'])

  #     " Marks
  #     call deoplete#custom#source('omni',          'mark', '⌾')
  #     call deoplete#custom#source('jedi',          'mark', '⌁')
  #     call deoplete#custom#source('vim',           'mark', '⌁')
  #     call deoplete#custom#source('neosnippet',    'mark', '•')
  #     call deoplete#custom#source('tag',           'mark', 't')
  #     call deoplete#custom#source('gtags',         'mark', 'gt')
  #     call deoplete#custom#source('buffer',        'mark', 'b')

  #     "
  #     " Default rank is 100, higher is better.
  #     call deoplete#custom#source('vim',           'rank', 630)
  #     call deoplete#custom#source('jedi',          'rank', 610)
  #     call deoplete#custom#source('neosnippet',    'rank', 510)
  #     call deoplete#custom#source('file_include',  'rank', 420)
  #     call deoplete#custom#source('file',          'rank', 410)
  #     call deoplete#custom#source('tag',           'rank', 400)
  #     call deoplete#custom#source('gtags',         'rank', 400)
  #     call deoplete#custom#source('buffer',        'rank', 320)

  #     " Source Loading
  #     " call deoplete#custom#source('jedi', 'filetypes', ['py'])

  #     call deoplete#custom#source('_', 'converters', [
  #       \ 'converter_remove_paren',
  #       \ 'converter_remove_overlap',
  #       \ 'converter_truncate_abbr',
  #       \ 'converter_truncate_menu',
  #       \ 'converter_auto_delimiter',
  #       \ ])
  #   dependby:
  #     - neco
  #     - neoinclude
  #     - deoplete-jedi
  #     - deoplete-clang

  # Shougo/neco-vim:
  #   loadafter: deoplete.nvim
  #   filetype: vim
  # zchee/deoplete-jedi:
  #   loadafter: deoplete.nvim
  #   filetype: python
  # Shougo/neoinclude.vim:
  #   loadafter: deoplete.nvim
  #   filetype: [c, cpp, objc, objcpp]

  # tweekmonster/deoplete-clang2:
  #   loadafter: deoplete.nvim
  #   filetype: [c, cpp, objc, objcpp]
  #   script: | 
  #     let g:deoplete#sources#clang#std = {
  #       \ 'c': 'c11',
  #       \ 'cpp': 'c++1z',
  #       \ 'objc': 'c11',
  #       \ 'objcpp': 'c++1z',
  #       \ }
  #     " let g:deoplete#sources#clang#flags = []
      
  # # zchee/deoplete-clang:
  # #   loadafter: deoplete.nvim
  # #   filetype: [c, cpp, objc, objcpp]
  # #   script: |
  # #     let g:deoplete#sources#clang#clang_header = 
  # #       \ 'C:/tc/sys/win64/lib/clang/'
  # #     let g:deoplete#sources#clang#libclang_path = 
  # #       \ 'C:/tc/sys/win64/bin/libclang.dll'
  # #     let g:deoplete#sources#clang#std = {'cpp': 'c++1z'}
  # #   submodule: true

  # # \ "C:/Program Files/LLVM/lib/clang/5.0.0/include"
  # # \ "C:/Program Files/LLVM/bin/libclang.dll"
  # Shougo/neosnippet-snippets: {}
  # Shougo/neosnippet.vim:
  #   dependon: neosnippet-snippets

