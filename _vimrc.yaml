# =========================================================================== _vimrc.yaml * miv plugin manager setup file.
#
# Author: Marcus Albertsson (arubertoson@github.com)
# License: MIT license
# ===========================================================================

# ===========================================================================
# CONTENTS

# |Editing|
#   |Operators|
#   |Textobjects|
# |Navigation|
# |Visual
#   |Visual-Themes|
#   |Syntax-Filetypes|
#   |Visual-Enhancements|
#   |Distraction-Free|
# |Auto-Complete|
# |Syntax-Checkers|
# |Command-Palette|
# |Git|
# |Views|
# |Debugging-Executing|
# |Language-Specific|
#   |Python|
#   |C\Cpp|


plugin:
  euclio/vim-markdown-composer: {}

  Shougo/vimproc.vim:
    build: make
    function: vimproc
    loadbefore:
      - quickrun

  danro/rename.vim:
    command:
      - Rename

  simeji/winresizer:
    command:
      - WinResizerStartResize
    script: |
      let g:winresizer_vert_resize = 4
      let g:winresizer_horiz_resize = 1
      let g:winresizer_keycode_finish = char2nr('o')
      nnoremap <silent> <leader>wr :<C-u>WinResizerStartResize<CR>


# ===========================================================================
# EDITING                                                           *Editing*

  kana/vim-smartinput:
    insert: true

  tomtom/tcomment_vim: {}
  tpope/vim-abolish:
    command:
      - S
      - Subvert
  mhinz/vim-sayonara:
    command:
      - Sayonara
    script: |
      nnoremap <leader>bd :Sayonara<CR>
      nnoremap <leader>bD :Sayonara!<CR>
      let g:sayonara_confirm_quit = 1
  Konfekt/vim-scratchpad:
    function: scratchpad#
    mapping:
      - <Plug>(ToggleScratchPad)
    script: |
      nmap <leader>fs <Plug>(ToggleScratchPad)
      command! -nargs=? Scratchpad call scratchpad#ToggleScratchPad(<q-args>)
  mtth/scratch.vim:
    command:
      - Scratch
    mapping:
      - <Plug>(scratch-insert-reuse)    
      - <Plug>(scratch-insert-clear)           
      - <Plug>(scratch-selection-reuse) 
      - <Plug>(scratch-selection-clear) 
    script: |
        let g:scratch_no_mappings = 1
        nmap <Leader>bs <Plug>(scratch-insert-reuse)
        nmap <Leader>bS <Plug>(scratch-insert-clear)
        xmap <Leader>bs <Plug>(scratch-selection-reuse)
        xmap <Leader>bS <Plug>(scratch-selection-clear)


  # *Operators & Textobjects*
  wellle/targets.vim: {}
  machakann/vim-sandwich:
    mapmode: [o, v]
    mapping: [sa, sd, sr]


# ===========================================================================
# NAVIGATION                                                     *Navigation*

  rhysd/clever-f.vim: {}
  chaoren/vim-wordmotion: {}


# ===========================================================================
# VISUAL-THEMES                                               *Visual-Themes*

  # *Syntax-Filetype*
  sheerun/vim-polyglot: {}


  # *Themes*
  reedes/vim-colors-pencil: {}
  mhinz/vim-janah:
    before: highlight Normal ctermbg=235
  ayu-theme/ayu-vim:
    script: |
      let g:ayucolor="mirage"
      Gautocmd ColorScheme *
        \  hi ALEErrorSign   guifg=#FF3333 guibg=#242B38 gui=bold
        \| hi ALEWarningSign guifg=#FFCC66 guibg=#242B38 gui=bold


  # *Distraction-Free-Mode*
  junegunn/goyo.vim:
    command: Goyo
    before: |
      function! s:goyo_enter() abort
        let b:quitting = 0
        let b:quitting_bang = 0
        autocmd QuitPre <buffer> let b:quitting = 1
        cabbrev <buffer> q! let b:quitting_bang = 1 <bar> q!
      endfunction

      function! s:goyo_leave() abort
        if b:quitting && len(filter(range(1, bufnr('$')), 'buflisted(v:val)')) == 1
          if b:quitting_bang
            qa!
          else
            qa
          endif
        endif
      endfunction

      autocmd! User GoyoEnter call <SID>goyo_enter()
      autocmd! User GoyoLeave call <SID>goyo_leave()
    script: |
      nnoremap <silent><Leader>Td :<C-u>Goyo<CR>
  junegunn/limelight.vim:
    command: Limelight
    after: |
      autocmd! User GoyoEnter Limelight
      autocmd! User GoyoLeave Limelight!
    script: |
      nnoremap <silent><Leader>Tl :<C-u>Limelight!<CR>


  # *Visual-Enhancements*
  yami-beta/vim-responsive-tabline: {}
  itchyny/vim-parenmatch:
    after: |
      highlight! link MatchParen ParenMatch
  itchyny/vim-cursorword:
    script: |
      augroup cursorword-filetype
        autocmd!
        autocmd FileType qf,denite,vimfiler,vimshell,thumbnail,vimcalc,quickrun,calendar let b:cursorword = 0
        autocmd InsertEnter * let b:cursorword = 0
        autocmd InsertLeave * let b:cursorword = 1
      augroup END
  # display indentguides ¦ ┆ │ ⎸ ▏
  Yggdroot/indentLine:
    script: |
      let g:indentLine_char = '¦'
      let g:indentLine_showFirstIndentLevel = 0
      let g:indentLine_leadingSpaceChar = '·'
      let g:indentLine_leadingSpaceEnabled = 0
  machakann/vim-highlightedyank:
    mapping:
      - <Plug>(highlightedyank)
    script: |
      map y <Plug>(highlightedyank)
      highlight link HighlightedyankRegion Visual
      let g:highlightedyank_highlight_duration = 100
  wellle/visual-split.vim:
    command:
      - VSResize
      - VSSplit
      - VSSplitAbove
      - VSSplitBelow

  # *Statusline*
  itchyny/lightline.vim:
    script: |
      let g:lightline = {
      \ 'enable': {
      \ 'tabline': 0,
      \ },
      \ 'colorscheme': 'wombat',
      \ 'active': {
      \   'left':  [ 
      \              ['mode', 'paste'],
      \              ['gitbranch', 'readonly', 'relativepath', 'modified'],
      \            ],
      \   'right': [ 
      \              ['percent', 'lineinfo'],
      \              ['fileformat', 'fileencoding', 'filetype'],
      \              ['linter_errors', 'linter_warnings', 'linter_ok'],
      \            ]
      \ },
      \ 'inactive': {
      \   'left':  [ 
      \              ['filename'], 
      \            ],
      \   'right': [ 
      \              ['lineinfo'],
      \              ['percent'],
      \            ] 
      \ },
      \ 'component_expand': {
      \   'linter_warnings': 'LightlineLinterWarnings',
      \   'linter_errors': 'LightlineLinterErrors',
      \   'linter_ok': 'LightlineLinterOK'
      \ },
      \ 'component_type': {
      \   'readonly': 'error',
      \   'linter_warnings': 'warning',
      \   'linter_errors': 'error',
      \ },
      \ }
      Gautocmd User ALELint call lightline#update()

      function! LightlineLinterErrors() abort
        let l:counts = ale#statusline#Count(bufnr(''))
        let l:all_errors = l:counts.error + l:counts.style_error
        let l:all_non_errors = l:counts.total - l:all_errors
        return l:counts.total == 0 ? '' : printf('x %d', all_errors)
      endfunction

      function! LightlineLinterWarnings() abort
        let l:counts = ale#statusline#Count(bufnr(''))
        let l:all_errors = l:counts.error + l:counts.style_error
        let l:all_non_errors = l:counts.total - l:all_errors
        return l:counts.total == 0 ? '' : printf('▲ %d', all_non_errors)
      endfunction

      function! LightlineLinterOK() abort
        let l:counts = ale#statusline#Count(bufnr(''))
        let l:all_errors = l:counts.error + l:counts.style_error
        let l:all_non_errors = l:counts.total - l:all_errors
        return l:counts.total == 0 ? '♦ Ok' : ''
      endfunction


# ===========================================================================
# AUTO-COMPLETE                                               *Auto-Complete*

  Shougo/deoplete.nvim:
    insert: true
    script: |
      let g:deoplete#enable_at_startup = 1

      let g:deoplete#max_list = 20
      let g:deoplete#auto_complete_delay = 30
      let g:deoplete#enable_refresh_always = 1
      let g:deoplete#max_abbr_width = 35
      let g:deoplete#max_menu_width = 20
      let g:deoplete#skip_chars = ['(', ')', '<', '>']
      let g:deoplete#tag#cache_limit_size = 800000
      let g:deoplete#file#enable_buffer_path = 1

      " Jedi
      let g:deoplete#sources#jedi#short_types = 1
      let g:deoplete#sources#jedi#show_docstring = 1
      let g:deoplete#sources#jedi#statement_length = 30

      " Sources
      let g:deoplete#ignore_sources = {}
      let g:deoplete#ignore_sources._ = ['around']
      let g:deoplete#ignore_sources.python = 
        \ ['buffer', 'dictionary', 'omni', 'tag', 'syntax']
      let g:deoplete#ignore_sources.c = 
        \ ['buffer', 'dictionary', 'omni', 'tag', 'syntax']
      let g:deoplete#ignore_sources.cpp = g:deoplete#ignore_sources.c  

      let g:deoplete#sources#clang#libclang_path = '/usr/lib/libclang.so.5.0'
      let g:deoplete#sources#clang#clang_header = '/usr/lib/clang'

      let g:deoplete#omni#input_patterns = get(g:, 'deoplete#omni#input_patterns', {})
      let g:deoplete#omni#input_patterns.python = ''
      let g:deoplete#omni#input_patterns.javascript = ''
    
      " Movement within 'ins-completion-menu'
      imap <expr><C-j>   pumvisible() ? "\<Down>" : "\<C-j>"
      imap <expr><C-k>   pumvisible() ? "\<Up>" : "\<C-k>"

      " Scroll pages in menu
      inoremap <expr><C-f> pumvisible() ? "\<PageDown>" : "\<Right>"
      inoremap <expr><C-b> pumvisible() ? "\<PageUp>" : "\<Left>"
      imap     <expr><C-d> pumvisible() ? "\<PageDown>" : "\<C-d>"
      imap     <expr><C-u> pumvisible() ? "\<PageUp>" : "\<C-u>"

      " Undo completion
      inoremap <expr><C-g> deoplete#undo_completion()

      " Redraw candidates
      inoremap <silent><expr><C-Space> deoplete#mappings#manual_complete()
      inoremap <expr><C-l> deoplete#refresh()
    after: |
      " Jedi
      call deoplete#custom#source('jedi', 'disable_syntaxes', ['Comment'])
      call deoplete#custom#source('jedi', 'matchers', ['matcher_fuzzy'])

      " Marks
      call deoplete#custom#source('omni',          'mark', '⌾')
      call deoplete#custom#source('jedi',          'mark', '⌁')
      call deoplete#custom#source('vim',           'mark', '⌁')
      call deoplete#custom#source('neosnippet',    'mark', '•')
      call deoplete#custom#source('tag',           'mark', 't')
      call deoplete#custom#source('gtags',         'mark', 'gt')
      call deoplete#custom#source('buffer',        'mark', 'b')

      " Default rank is 100, higher is better.
      call deoplete#custom#source('vim',           'rank', 630)
      call deoplete#custom#source('jedi',          'rank', 610)
      call deoplete#custom#source('neosnippet',    'rank', 510)
      call deoplete#custom#source('file_include',  'rank', 420)
      call deoplete#custom#source('file',          'rank', 410)
      call deoplete#custom#source('tag',           'rank', 400)
      call deoplete#custom#source('gtags',         'rank', 400)
      call deoplete#custom#source('buffer',        'rank', 320)

      call deoplete#custom#source('_', 'converters', [
        \ 'converter_remove_paren',
        \ 'converter_remove_overlap',
        \ 'converter_truncate_abbr',
        \ 'converter_truncate_menu',
        \ 'converter_auto_delimiter',
        \ ])
    dependby:
      - neco
      - neoinclude
      - deoplete-jedi
      - deoplete-clang

  Shougo/neco-vim:
    loadafter: deoplete.nvim
    filetype: vim
  zchee/deoplete-jedi:
    loadafter: deoplete.nvim
    filetype: python
    submodule: true

  Shougo/neoinclude.vim:
    loadafter: deoplete.nvim
    filetype: [c, cpp, objc, objcpp]
  zchee/deoplete-clang:
    loadafter: deoplete.nvim
    filetype: [c, cpp, objc, objcpp]
    submodule: true

# ===========================================================================
# SYNTAX-CHECKERS                                           *Syntax-Checkers*

  csexton/trailertrash.vim:
    command:
      - TrailerTrim
      - TrailerToggle

  rhysd/vim-grammarous:
    command: GrammarousCheck
    script: |
      nmap <silent> <leader>eg :GrammarousCheck<CR>
    before: |
      if IsWindows()
        let g:grammarous#languagetool_cmd = 
        \ "java -d64 -jar languagetool-commandline.jar"
      endif
      let g:grammarous#default_comments_only_filetypes = {
        \ '*' : 1, 'help' : 0, 'markdown' : 0,
        \ }

  w0rp/ale:
    mapmode: 'n'
    mapping:
      - <Plug>(ale_toggle)
      - <Plug>(ale_fix)
    script: |
      nmap <silent> <leader>el <Plug>(ale_toggle)
      nmap <silent> <leader>ef <Plug>(ale_fix)
      nmap <silent> <leader>en <Plug>(ale_next_wrap)
      nmap <silent> <leader>ep <Plug>(ale_previous_wrap)
    before: |
      let g:ale_sign_error = '►'
      let g:ale_sign_warning = '»'
      let g:ale_statusline_format = ['× %d', '∆ %d', '♦ ok']

      let g:ale_lint_on_text_changed = 0
      let g:ale_lint_on_insert_leave = 0
      let g:ale_lint_on_save = 1
      let g:ale_lint_on_enter = 1

      let g:ale_fixers = {
        \ 'python': ['yapf'],
        \ }
      let g:ale_fix_on_save = 1
      let g:ale_linters = {
        \ 'jsx': ['stylelint', 'eslint'],
        \ 'python': ['pycodestyle', 'pylint'],
        \ }
      let g:ale_linter_aliases = {'jsx': 'css'}


# ===========================================================================
# COMMAND_PALETTE                                           *Command-Palette*

  Shougo/denite.nvim:
    command: 
      - Denite
      - DeniteProjectDir
      - DeniteCursorWord
    script: |
      nnoremap <silent> <leader>pf :DeniteProjectDir file_rec/git<cr>

      nnoremap <silent> <leader>sg :<C-u>Denite grep<CR>
      nnoremap <silent> <leader>sf :<C-u>Denite file_rec<CR>
      nnoremap <silent> <leader>ss :<C-u>Denite line -buffer-name=search<CR>
      nnoremap <silent> <leader>as :<C-U>Denite file_rec -path=$VIMPATH<CR>

      nnoremap <silent> <leader>bb :<C-u>Denite buffer<CR>
      nnoremap <silent> <leader>bt :<C-u>Denite filetype<CR>
      nnoremap <silent> <leader><leader> :<C-u>Denite command<CR>
      nnoremap <silent> <leader>` :<C-u>Denite command_history<CR>
    after: |
      call denite#custom#option('_', {
        \ 'prompt': '❯',
        \ 'empty': 1,
        \ 'winheight': 10,
        \ 'short_source_names': 1,
        \ 'vertical_preview': 1,
        \ 'updatetime': 10,
        \ })
      call denite#custom#filter('matcher_ignore_globs', 'ignore_globs', [
        \ '.git/', '__pycache__/', '*.py[cd]'
        \ ])

      if executable('rg')
        call denite#custom#var('grep', 'command', ['rg'])
        call denite#custom#var('grep', 'recursive_opts', [])
        call denite#custom#var('grep', 'final_opts', ['.'])
        call denite#custom#var('grep', 'separator', ['--'])
        call denite#custom#var('grep', 'default_opts',
          \ ['--maxdepth', '8', '--vimgrep', '--no-heading'])
      endif
      call denite#custom#var('file_rec', 'command', ['rg', '--files'])

      " Sources
      call denite#custom#source('buffer', 'sorters', ['sorter_reverse'])
      call denite#custom#source('file_rec', 'sorters', ['sorter_sublime'])
      call denite#custom#source('file_rec', 'matchers', ['matcher_substring'])
      call denite#custom#source('file_mru', 'matchers', ['matcher_project_files',
        \ 'matcher_substring'])
      call denite#custom#source('file_mru,file_rec,buffer', 'converters',
        \ ['converter_relative_word'])

      call denite#custom#alias('source', 'file_rec/git', 'file_rec')
      call denite#custom#var('file_rec/git', 'command', 
        \ ['git', 'ls-files', '--others', '--cached', '--exclude-standard'
        \ ])

      " Mappings
      call denite#custom#map('normal', 'q',        '<denite:quit>',                        'noremap')
      call denite#custom#map('normal', '<Esc>',    '<denite:quit>',                        'noremap')
      call denite#custom#map('normal', '-',        '<denite:choose_action>',               'noremap')
      call denite#custom#map('normal', 'd',        '<denite:do_action:delete>',            'noremap')
      call denite#custom#map('normal', 'o',        '<denite:do_action:default>',           'noremap')
      call denite#custom#map('normal', 'f',        '<denite:do_action:find>',              'noremap')
      call denite#custom#map('normal', 'r',        '<denite:do_action:reset>',             'noremap')
      call denite#custom#map('normal', 'u',        '<denite:do_action:update>',            'noremap')
      call denite#custom#map('normal', '<C-v>',    '<denite:do_action:vsplit>',            'noremap')
      call denite#custom#map('insert', '<C-i>',    '<denite:choose_action>',               'noremap')
      call denite#custom#map('insert', 'kj',       '<denite:enter_mode:normal>',           'noremap')
      call denite#custom#map('insert', '<C-j>',    '<denite:move_to_next_line>',           'noremap')
      call denite#custom#map('insert', '<C-k>',    '<denite:move_to_previous_line>',           'noremap')
      call denite#custom#map('insert', '<C-p>',    '<denite:paste_from_default_register>', 'noremap')
      call denite#custom#map('insert', '<C-d>',    '<denite:delete_char_before_caret>',    'noremap')
      call denite#custom#map('insert', '<C-h>',    '<denite:move_caret_to_left>',          'noremap')
      call denite#custom#map('insert', '<C-l>',    '<denite:move_caret_to_right>',         'noremap')
      call denite#custom#map('insert', '<C-a>',    '<denite:move_caret_to_head>',          'noremap')
      call denite#custom#map('insert', '<C-e>',    '<denite:move_caret_to_tail>',          'noremap')
      call denite#custom#map('insert', '<C-v>',    '<denite:do_action:vsplit>',            'noremap')

      autocmd! Syntax denite
        \  highlight! default link deniteStatusLinePath   StatusLine
        \| highlight! default link deniteStatusLineNumber StatusLine


# ===========================================================================
# GIT                                                                   *Git*

  # Gutter signs for git diff
  mhinz/vim-signify: {}
  # Git log/diff viewer
  cohama/agit.vim:
    command:
      - Agit
      - AgitFile
      - AgitDiff
        
  # Magit inspired git interface in vim
  jreybert/vimagit:
    command:
      - Magit
    script: |
      let g:magit_default_show_all_files = 0
      
  # Save sessions with branches
  ToruIwashita/git-switcher.vim:
    script: |
      let g:gsw_sessions_dir = expand('$XDG_CACHE_HOME/git_switcher/')
      let g:gsw_autoload_session = 'yes'
      let g:gsw_autodelete_sessions_if_branch_not_exist = 'confirm'

# ===========================================================================
# VIEWS                                                               *Views*

  mbbill/undotree:
    command:
      - UndotreeToggle
    script: |
      nnoremap <silent> ,u :<C-u>call UndotreeMyToggle()<CR>
      Gautocmdft undotree,diff setlocal nonu nornu colorcolumn=
      function! UndotreeMyToggle() abort
        if &l:filetype != 'php'
          let s:undotreeLastFiletype = &l:filetype
          MyAutoFT diff MyAuto BufEnter,WinEnter <buffer>
            \ let &l:syntax = s:undotreeLastFiletype
        endif
        UndotreeToggle
      endfunction
    before: |
      let g:undotree_WindowLayout = 4
      let g:undotree_SplitWidth = 36
      let g:undotree_SetFocusWhenToggle = 1
      function! g:Undotree_CustomMap() abort
        nmap <buffer> o <Enter>
        nmap <buffer> u <Plug>UndotreeUndo
        nmap <buffer> r <Plug>UndotreeRedo
        nmap <buffer> h <Plug>UndotreeGoNextState
        nmap <buffer> l <Plug>UndotreeGoPreviousState
        nmap <buffer> d <Plug>UndotreeDiffToggle
        nmap <buffer> t <Plug>UndotreeTimestampToggle
        nmap <buffer> C <Plug>UndotreeClearHistory
      endfunction
      Gautocmdft diff Gautocmd BufEnter,WinEnter <buffer>
        \  nnoremap <silent> <buffer> q :<C-u>UndotreeHide<CR>
        \| nnoremap <silent> <buffer> ` :<C-u>UndotreeHide<CR>


# ===========================================================================
# DEBUGGING-EXECUTING                                   *Debugging-Executing*

  thinca/vim-prettyprint: {}

  thinca/vim-quickrun:
    command: QuickRun
    script: |
      nnoremap <silent> <F8> :<C-u>QuickRun<CR>


# ===========================================================================
# LANGUAGE-SPECIFIC                                       *Language-Specific*

  # *Python*
  davidhalter/jedi-vim:
    filetype: python
    script: |
      let g:jedi#completions_enabled = 0
      let g:jedi#auto_vim_configuration = 0
      let g:jedi#smart_auto_mappings = 0
      let g:jedi#show_call_signatures = 0
      let g:jedi#use_splits_not_buffers = 1
  fisadev/vim-isort:
    command: Isort
    filetype: python
    script: |
      let g:vim_isort_map = ''


# ===========================================================================
# FILETYPES                                                       *Filetypes*
filetype:

  python: |
    nnoremap <buffer> <leader>gt :call jedi#goto()<CR>
    nnoremap <buffer> <leader>ga :call jedi#goto_assignments()<CR>
    nnoremap <buffer> <leader>gd :call jedi#goto_definitions()<CR>
    nnoremap <buffer> <leader>gu :call jedi#usages()<CR>
    nnoremap <buffer> <leader>gr :call jedi#rename()<CR>
    vnoremap <buffer> <leader>gr :call jedi#rename_visual()<CR>
    nnoremap <buffer> K :call jedi#show_documentation()<CR>
    let g:ale_python_pylint_options = "--init-hook=\"import sys; sys.path.append('C:/Program Files/Autodesk/Maya2017/devkit/other/pymel/extras/completion/py')\""


# ===========================================================================
# HOOK-ON-SOURCE                                             *Hook-on-source*

before: |
  Gautocmd BufWritePost _vimrc.yaml let mivjob = jobstart(
    \ ['bash', '-c ', '"miv install"'])

  let g:vimrc#theme = 'icode'
  let g:vimrc#themes = {
    \   'iwrite': { 'colorscheme': 'pencil',
    \              'background': 'light',
    \              'font-size': '14',
    \              'linespace': '6',
    \              'typeface': 'Cousine',
    \              'callback': 'iwrite'},
    \   'icode': { 'colorscheme': 'ayu',
    \              'background': 'dark',
    \              'font-size': '12',
    \              'linespace': '3',
    \              'typeface': 'Droid Sans Mono',
    \              'callback': 'icode'},
    \ }


# ===========================================================================
# HOOK-AFTER-SOURCE                                       *Hook-after-source*

after: |
  if !has('gui_running')
    execute 'colorscheme' get(
      \ g:vimrc#themes[g:vimrc#theme], 'colorscheme', 'desert')
  endif
